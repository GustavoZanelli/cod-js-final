!
Configurar nombre y mail del usuario
git config --global user.name"Gustavo"
git config --global user.name"gdzanelli@hotmail.com"
git init
git config --global -l   lista los archivos
git status
git add = paso a staging area (primer paso )
git commit -m "descripcion"
git log  =  mostrar todos los cambios confirmados
git commit -am "" hace el add y el commit
git --oneline me da toda la info en una sola linea
git reset --hard vuelve a un putno de la historia  = trae el archivo viejo


pwd = vemos donde estamos posicionados   
ls = listamos archivos
ls -a = listamos archivos,incluidos los ocultos
mkdir = creamos archivos
cd = navegamos en las carpetas
cd .. = volvemos una carpeta atras
git init = inicializamos repositorio
clear = limpiamos pantalla
git log = vemos commits generados
git reflog    ********** 
git add (especificamos archivo)=agregamos el archivo al "stage area"
git add . = agregamos todos los archivos 
git commit= confirmamos los cambios
git diff = vemos las diferencias de los cambios
git status = vemos el estado en "area de trabajo" y en "area de preparacion"
git log = vemos la "historia" del proyecto
git log -(n)= especificamos la cantidad de commits que queremos visualizar
git log --oneline = vemos los cambios en una sola linea
git log --author="nombre" = buscamos por descripcion
git log --graph --all = vemos ggit branchraficamente toda la historia de nuestro proyecto(ramas)

git commit --amend = modificamos commit anterior
git commit --amend -m "mensaje nuevo" = modificamos la descripcion de la confirmacion

git checkout (commit) = vemos el estado de la confirmacion  ***********
git revert = deshacemos los cambios pero no borramos el commit
git reset = deshacemos los cambios y borramos la confirmaciones
git restore = restauramos cambios

git branch (nombre)=creamos ramas
git branch -a = listamos las ramas
git branch -m (nombre anterior) (nombre nuevo) = modificamos nombre de la rama
git branch -d = borramos la rama junto a todos sus cambios
git branch -b = creamos rama y nos posicionamos en esta

git merge (nombre de la rama)=fusionamos las ramas;debemos posicionarnos en la rama de destino

123456

Git hub conceptos
git remote add origin https://github.com/GustavoZanelli/CodoaCodo.git
git remote set-url origin https://github.com/GustavoZanelli/CodoaCodo.git
git remote set-url origin https://github.com/GustavoZanelli/codo.git
git push -u origin main    o   git push -u origin master:main en vez de master destino a main destino

git remote -v
git pull origin main   

git checkout f70053e06ca3ebef4ba90f426d6a4a2186a13f02   para pararse en el commit que quiero traer desde la web  // despues hago el pull
git checkout RAMA para cambiar de rama

git clone https://github.com/GustavoZanelli/CodoaCodo.git     copiar todo el proyecto nuevamnte en la carpeta local

$ git push -u origin master:main      cambia rama por defecto donde se hace el pull

shift zz para salir del log







…or create a new repository on the command line
echo "# CodoaCodo" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/GustavoZanelli/CodoaCodo.git
git push -u origin main


…or push an existing repository from the command line
git remote add origin https://github.com/GustavoZanelli/CodoaCodo.git
git branch -M main
git push -u origin main